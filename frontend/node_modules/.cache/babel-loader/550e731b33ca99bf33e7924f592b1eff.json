{"ast":null,"code":"const getState = _ref => {\n  let {\n    getStore,\n    getActions,\n    setStore\n  } = _ref;\n  return {\n    store: {\n      token: null,\n      message: null,\n      demo: [{\n        title: \"First Task\",\n        done: false\n      }, {\n        title: \"Second Task\",\n        done: false\n      }]\n    },\n    actions: {\n      // Use getActions to call a function within a function\n      exampleFunction: () => {\n        getActions().changeColor(0, \"green\");\n      },\n      syncTokenFromSessionStore: () => {\n        const token = sessionStorage.getItem('token');\n        if (token && token != \"\" && token != \"undefined\") setStore({\n          token: token\n        });\n      },\n      login: async (email, password) => {\n        // THIS WAS USED TO TEST FOR LOGIN TRY IT AND CHECK YOUR CONSOLE\n        console.log(\"I want to login oooo\");\n        console.log(email);\n        console.log(password); // THIS WAS USED TO TEST FOR LOGIN TRY IT AND CHECK YOUR CONSOLE\n\n        const opts = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: email,\n            password: password\n          })\n        };\n\n        try {\n          const resp = await fetch('http://127.0.0.1:5000/token', opts);\n\n          if (resp.status !== 200) {\n            alert('Invalid credentials');\n            return false;\n          }\n\n          const data = await resp.json();\n          console.log('this came from backend', data);\n          sessionStorage.setItem('token', data.access_token);\n          setStore({\n            token: data.access_token\n          });\n          return true;\n        } catch (error) {\n          console.error(\"there was an error login in!!!\", error);\n        }\n      },\n      loadSomeData: () => {\n        // fetching data from the backend\n        fetch(\"http://localhost:5000/\").then(resp => resp.json()).then(data => setStore({\n          message: data.message\n        })).catch(error => console.log(\"Error loading data\", error));\n      },\n      changeColor: (index, color) => {\n        //get the store\n        const store = getStore(); //we have to loop the entire demo array to look for the respective index\n        //and change its color\n\n        const demo = store.demo.map((elm, i) => {\n          if (i === index) elm.background = color;\n          return elm;\n        }); //reset the global store\n\n        setStore({\n          demo: demo\n        });\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"names":["getState","getStore","getActions","setStore","store","token","message","demo","title","done","actions","exampleFunction","changeColor","syncTokenFromSessionStore","sessionStorage","getItem","login","email","password","console","log","opts","method","headers","body","JSON","stringify","resp","fetch","status","alert","data","json","setItem","access_token","error","loadSomeData","then","catch","index","color","map","elm","i","background"],"sources":["/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/store/actions/actions.js"],"sourcesContent":["const getState = ({getStore, getActions, setStore}) => {\n    \n    return {\n        \n        store: {\n            token: null,\n            message: null,\n            demo: [ \n                { \n                    title: \"First Task\", \n                    done: false \n                }, \n                { \n                    title: \"Second Task\", \n                    done: false \n                } \n            ],\n         \n        },\n        \n        actions: {\n            // Use getActions to call a function within a function\n            exampleFunction: () => {\n                getActions().changeColor(0, \"green\");\n            },\n\n            syncTokenFromSessionStore: () => {\n                const token = sessionStorage.getItem('token');\n                if (token && token != \"\" && token != \"undefined\") setStore({token: token});\n            },\n\n            login: async (email, password) => {\n                // THIS WAS USED TO TEST FOR LOGIN TRY IT AND CHECK YOUR CONSOLE\n                console.log(\"I want to login oooo\")\n                console.log(email)\n                console.log(password)\n                // THIS WAS USED TO TEST FOR LOGIN TRY IT AND CHECK YOUR CONSOLE\n                const opts = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        email: email,\n                        password: password,\n                    }),\n                };\n\n                try {\n                    const resp = await fetch('http://127.0.0.1:5000/token', opts)\n                    if (resp.status !== 200) {\n                        alert('Invalid credentials');\n                        return false;\n                    }\n\n                    const data = await resp.json();\n                    console.log('this came from backend',data );\n                    sessionStorage.setItem('token', data.access_token);\n                    setStore({token: data.access_token});\n                    return true;\n                }\n                catch (error) {\n                    console.error(\"there was an error login in!!!\", error);\n                }\n               \n            },\n\n            loadSomeData: () => {\n                // fetching data from the backend\n                fetch(\"http://localhost:5000/\")\n                    .then(resp => resp.json())\n                    .then(data => setStore({message: data.message}))\n                    .catch(error => console.log(\"Error loading data\", error));\n            },\n            changeColor: (index, color) => {\n                //get the store\n                const store = getStore();\n\n                //we have to loop the entire demo array to look for the respective index\n                //and change its color\n                const demo = store.demo.map((elm, i) => {\n                    if (i === index) elm.background = color;\n                    return elm;\n                });\n                \n\n                //reset the global store\n                setStore({ demo: demo });\n            },\n\n           \n            \n        }\n    };\n};\n\n\nexport default getState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}