[{"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/index.js":"1","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/App.js":"2","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/reportWebVitals.js":"3","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Login.js":"4","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/About.js":"5","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Home.js":"6","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Error.js":"7","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Register.js":"8","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Dashboardproxi.js":"9","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Profile.js":"10","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/Header.js":"11","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/Footer.js":"12","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/LiveLocation.js":"13","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/Gatepool.js":"14","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Modal/Modals.js":"15","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Principal/Dashboardprincipal.js":"16","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Principal/Taskprincipal.js":"17","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Principal/Sendrequests.js":"18","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/store/actions/appContext.js":"19","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/store/actions/actions.js":"20","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/History.js":"21","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/Ticket.js":"22","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/Tasks.js":"23"},{"size":547,"mtime":1664474654000,"results":"24","hashOfConfig":"25"},{"size":3338,"mtime":1665657503563,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1664474654000,"results":"27","hashOfConfig":"25"},{"size":2806,"mtime":1666000207935,"results":"28","hashOfConfig":"25"},{"size":805,"mtime":1664474654000,"results":"29","hashOfConfig":"25"},{"size":3051,"mtime":1664474654000,"results":"30","hashOfConfig":"25"},{"size":470,"mtime":1664474654000,"results":"31","hashOfConfig":"25"},{"size":7838,"mtime":1666000625353,"results":"32","hashOfConfig":"25"},{"size":2355,"mtime":1665700210624,"results":"33","hashOfConfig":"25"},{"size":3055,"mtime":1666000630694,"results":"34","hashOfConfig":"25"},{"size":1510,"mtime":1665957350808,"results":"35","hashOfConfig":"25"},{"size":693,"mtime":1664474654000,"results":"36","hashOfConfig":"25"},{"size":770,"mtime":1664474654000,"results":"37","hashOfConfig":"25"},{"size":7403,"mtime":1665700246476,"results":"38","hashOfConfig":"25"},{"size":800,"mtime":1664474654000,"results":"39","hashOfConfig":"25"},{"size":2387,"mtime":1664474654000,"results":"40","hashOfConfig":"25"},{"size":10816,"mtime":1664474654000,"results":"41","hashOfConfig":"25"},{"size":12195,"mtime":1665659712333,"results":"42","hashOfConfig":"25"},{"size":891,"mtime":1665072481700,"results":"43","hashOfConfig":"25"},{"size":3825,"mtime":1665996434846,"results":"44","hashOfConfig":"25"},{"size":2126,"mtime":1665698602832,"results":"45","hashOfConfig":"25"},{"size":1604,"mtime":1665698945197,"results":"46","hashOfConfig":"25"},{"size":1979,"mtime":1665701479662,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1d7wey0",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"51"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"51"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"51"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"51"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/index.js",[],[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/App.js",["129","130","131","132","133"],[],"import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Home from \"./Pages/Home\";\nimport Login from \"./Pages/Login\";\nimport Register from \"./Pages/Register\";\nimport Error from \"./Pages/Error\";\nimport Header from \"./Components/Header\";\nimport Footer from \"./Components/Footer\";\nimport About from \"./Pages/About\";\nimport Dashboardproxi from \"./Pages/Dashboardproxi\";\nimport Gatepool from \"./Dashboard_Items/Gatepool\";\nimport Profile from \"./Pages/Profile\";\nimport Modals from \"./Modal/Modals\";\nimport Dashboardprincipal from \"./Pages/Principal/Dashboardprincipal\";\nimport Sendrequests from \"./Pages/Principal/Sendrequests\";\nimport Tasksprincipal from \"./Pages/Principal/Taskprincipal\";\nimport React from \"react\";\nimport LiveLocation from \"./Dashboard_Items/LiveLocation\";\nimport Tasks from \"../src/Dashboard_Items/Tasks\";\nimport getState from \"./Components/store/actions/actions\";\nimport { Context } from \"./Components/store/actions/appContext\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  // const [tasks, setTasks] = React.useState([]);\n  // useEffect(() => {\n  //   fetch(\"/fecthtasks\").then((response) =>\n  //     response.json().then((data) => {\n  //       setTasks(data.tasks);\n  //     })\n      \n  //   );\n    \n  // }, []);\n  \n\n  // ALL YOUR STORE ACTION COMES IN HERE AND THIS WRAPPER THAT WAS MEANT TO BE HERE HAS BEEN MOVED TO THE BOTTOM\n  // THAT WHY YOU HAVE cONTEXT.PROVIDER WITH THE VALUE OF YOUR STATE ACTION WHICH WAS PULLED FROM GETACTIONS\n\n  const [state, setState] = React.useState(\n    getState({\n      getStore: () => state.store,\n      getActions: () => state.actions,\n      setStore: (updatedStore) =>\n        setState({\n          store: Object.assign(state.store, updatedStore),\n          actions: { ...state.actions },\n        }),\n    })\n  );\n  React.useEffect(() => {\n    state.actions.loadSomeData();\n    // state.actions.syncTokenFromSessionStore().\n  }, [state.actions]);\n\n  const authenticationContext = React.useMemo(() => ({\n    TOKEN_SYNCHRONIZATION: async () => {},\n    SignIn: async (userToken, accountType) => {},\n\n    SignInDisplayer: async (userToken, accountType) => {},\n    SignOut: async () => {},\n  }));\n\n  return (\n    \n    <BrowserRouter>\n      <Context.Provider value={state}>\n        <Header />\n        {/* <Gatepool tasks={tasks}/> */}\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"Dashboardprincipal\" element={<Dashboardprincipal />} />\n          <Route path=\"login/*\" element={<Login />} />\n          <Route path=\"*\" element={<Error />} />\n          <Route path=\"Register\" element={<Register />} />\n          <Route path=\"About\" element={<About />} />\n          <Route path=\"Dashboardproxi\" element={<Dashboardproxi />} />\n          <Route path=\"Gatepool\" element={<Gatepool  />} />\n          <Route path=\"Profile\" element={<Profile />} />\n          <Route path=\"Sendrequests\" element={<Sendrequests />} />\n          <Route path=\"Tasksprincipal\" element={<Tasksprincipal />} />\n          <Route path=\"LiveLocation\" element={<LiveLocation />} />\n          <Route path=\"/Logout\" element={<Home />} />\n          <Route path=\"Tasks\" element={<Tasks />} />\n        </Routes>\n\n        <Footer />\n      </Context.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/reportWebVitals.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Login.js",["134","135","136","137","138","139"],[],"import React, { useContext, useState} from 'react'\nimport {Context} from '../Components/store/actions/appContext';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport '../Styles/Login.css'\nimport { RadioGroup } from '@mui/material';\nimport { FormControlLabel } from '@mui/material';\nimport { Radio } from '@mui/material';\nimport {useNavigate} from 'react-router-dom';\n \n\nexport const Login =() => {\n  const {actions,store} = useContext(Context);\n  const [error, setError] = React.useState(\"\");\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState(\"\");\n  const history = useNavigate();\n\n  \n\n  const handleClick = async (e) => {\n    e.preventDefault();\n    if (email === \"\" || password === \"\") {\n      setError(\"Please fill all fields\");\n      return;\n    } \n\n    const response = await actions.login(email, password).then((response) => {\n      \n      if (response) {\n        history('/Dashboardproxi');\n      } else {\n        setError('Invalid credentials');\n      }\n      \n    });\n\n  };  \n  if (store.token && store.token != \"\" && store.token != undefined) history(\"/Dashboardproxi\");\n  \n  return (\n    <main className='container' id='majordiv'>\n      {store.token && store.token!= \"\" && store.token != undefined ? (\"you are logged in with this token \" + store.token \n      ) : (\n      <div>\n       <Form>\n       <div class=\"col-md-4\">\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control type=\"email\" placeholder=\"Enter email\" value={email} onChange={(e) => setEmail(e.target.value)}  />\n        <Form.Text className=\"text-muted\">\n          We'll never share your email with anyone else.\n        </Form.Text>\n      </Form.Group>\n      </div>\n      <div class=\"col-md-4\">\n      <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Password\"  value={password} onChange={(e) => setPassword(e.target.value)} />\n      </Form.Group>\n        </div>\n    <RadioGroup name=\"use-radio-group\" defaultValue=\"first\">\n  <FormControlLabel value=\"first\" label=\"Principal\" control={<Radio />} />\n  <FormControlLabel value=\"second\" label=\"Proxy\" control={<Radio />} />\n  <FormControlLabel value=\"third\" label=\"Corporate\" control={<Radio />} />\n</RadioGroup>\n      <Button variant=\"primary\" type=\"submit\" onClick={handleClick} >\n        Submit\n      </Button>\n    </Form>\n    {error && <p className=\"error\" style={{color:'red'}}>{error}</p>}\n   \n    <div className='col-md-4'> \n        <span>Don't have an account? <a href='/Register'>Register</a></span>\n    </div>\n \n    </div>\n     )} \n    \n    </main>\n  )\n\n}\n\n\n\n\n\nexport default Login","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/About.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Home.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Error.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Register.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Dashboardproxi.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Profile.js",["140","141","142","143"],[],"import React from 'react'\nimport { Toast } from 'react-bootstrap';\nimport {useNavigate} from 'react-router-dom'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Profile() {\n  const navigate = useNavigate();\n  const [error, setError] = React.useState(\"\");\n\n  // if (firstName === \"\" || lastName === \"\") {\n  //   setError(\"Please fill all fields\");\n  //   return;\n  // } \n  \n  const navigateToDashboard = () => {\n    navigate('/dashboardproxi')\n  }\n  const notifyProfile= ()=> toast('Profile Updated')\n\n  function functionWrapperB (){\n  notifyProfile();\n  \n  }\n\n  return (\n    <div className='container'>\n       <ToastContainer />\n        <div className='row' style={{marginTop:'50px', marginBottom:'80px'}}>\n            <div className='col-4'>\n            <h4>Profile</h4>\n            <label>First Name</label>\n            <input type='text' className='form-control' id='firstName' placeholder='First Name' />\n            <br />\n            <label>Last Name</label>\n            <input type='text' className='form-control' id='lastName' placeholder='Last Name' />\n            <br />\n            <label>Phone Number</label>\n            <input type='text' className='form-control' placeholder='Email' />\n            <br />\n            <input type='text' className='form-control' placeholder='Phone' />\n            <br />\n            <input type='text' className='form-control' placeholder='Address' />\n            <br />\n            <input type='text' className='form-control' placeholder='City' />\n            <br />\n            <input type='text' className='form-control' placeholder='State' />\n            <br />\n            <input type='text' className='form-control' placeholder='LGA' />\n            <br />\n            </div>\n            <div className='col-4'>\n            <h4>Upload Documents</h4>\n            <input type='file' className='form-control' placeholder='' />\n            <br />\n            <input type='file' className='form-control' placeholder='' />\n            <br />\n            <input type='file' className='form-control' placeholder='' />\n            <br />\n            <input type='file' className='form-control' placeholder='' />\n            <br />\n            {/* click to add more */}\n            <button className='btn btn-primary'>Add More</button>\n\n       \n            <br />\n             </div>\n            <div className='col-4'>\n            <h4>Change Password</h4>\n            <input type='text' className='form-control' placeholder='Current Password' />\n            <br />\n            <input type='text' className='form-control' placeholder='New Password' />\n            <br />\n            <input type='text' className='form-control' placeholder='Confirm Password' />\n            <br />\n            <button className='btn btn-primary' onClick={functionWrapperB}>Submit</button>\n            <a href='/dashboardproxi' className='' style={{marginLeft:'10px'}}>return to dashboard</a>\n            </div>\n        </div>\n\n    </div>\n  )\n}\n\nexport default Profile","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/Header.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/Footer.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/LiveLocation.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/Gatepool.js",["144","145","146","147","148","149","150","151","152","153","154"],[],"import { fontSize, height } from \"@mui/system\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport Profilepics from \"../Media/profilepics.jpeg\";\nimport Pending from \"../Media/wall-clock.png\";\nimport profileCert from \"../Media/check.png\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useNavigate } from \"react-router-dom\";\nimport Tasksreport from \"./Tasks\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { List } from \"semantic-ui-react\";\n\n\nfunction Gatepool({}) {\n  // modals\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const [showTasks, setTasks] = React.useState(false);\n  const notify = () => toast(\"You have accepted the job, please update task when done!\");\n  const notify2= () => toast(\"You have declined the job\");\n  const initialText = 'Accept';\n  const [taskStatus, settaskStatus] = useState('Unassigned');\n  // const rejectText = 'Reject';\n  const [buttonText, setButtonText] = useState(initialText);\n\n\n   //tasks requests\n\nconst [taskss, setTaskss] = React.useState([]);\n  useEffect(() => {\n    fetch(\"/fecthtasks\").then((response) =>\n      response.json().then((data) => {\n        setTaskss(data.tasks);\n      })\n    );\n  }, []);\n\n  // const [sectask, setSectask] = React.useState([]);\n  // useEffect(() => {\n  //   fetch(\"/fecthtasks\").then((response) =>\n  //     response.json().then((data) => {\n  //       setTaskss(data.tasks);\n  //     })\n  //   );\n  // }, []);\n\n\n  //Job status\n  function jobStatus() {\n    if (taskStatus === 'Unassigned') {\n      settaskStatus('Assigned');\n      setButtonText('Reject?');\n      notify('You have accepted the job, please update task when done!');\n    } else {\n      settaskStatus('Unassigned');\n      setButtonText(initialText);\n      notify2();\n    }\n  }\n\n  // Disable newClick button\n  function wrapperFunction() {\n    // setTasks(!showTasks);\n    handleClose();\n    // notify();\n    handleClick()\n    // newClick();\n    jobStatus()\n  }\n\n  function secondWrapperFunction(){\n    handleClose();\n    // notify2();\n\n  }\n\n  //Task light changing\n\n  const [isActive, setActive] = useState(\"true\");\n  const handleClick = () => {\n    setActive(current => !current);\n  };\n \n \n  return (\n    <>\n    <div className=\"container\">\n  \n      <ToastContainer />\n      {/* container for gatepool */}\n      <div\n        className=\"row\"\n        style={{\n          border: \"1px solid black\",\n          backgroundColor: \"#283645\",\n          height: \"35em\",\n          width: \"55em\",\n          borderRadius: \"30px\",\n          marginTop: \"30px\",\n        }}\n      >\n        {/* container for each post */}\n        <div className=\"col-4\">\n        {taskss.map(task => {\n          return (\n          <div key={task.id}\n            style={{\n              backgroundColor: \"#36495C\",\n              color: \"white\",\n              height: \"5em\",\n              width: \"15em\",\n              borderRadius: \"15px\",\n              marginTop: \"30px\",\n              marginLeft: \"10px\",\n            }}\n            className=\"row\"\n          >\n            {/* alert light red */}\n            <div\n              className=\"col-1\"\n              style={{ backgroundColor: isActive ? 'red' : 'Yellow', borderRadius: \"10px\", marginRight:'10px' }}\n            >\n              <div></div>\n            </div>\n            {/* profilepic and profile badge */}\n            <div className=\"col-2\">\n              <img\n                src={profileCert}\n                alt=\"profiles\"\n                style={{\n                  height: \"0.5em\",\n                  width: \"0.5em\",\n                  marginLeft: \"-0.8em\",\n                  marginTop: \"-1em\",\n                }}\n              />\n              <img\n                src={Profilepics}\n                alt=\"profiles\"\n                style={{\n                  height: \"2em\",\n                  width: \"2em\",\n                  marginTop: \"1em\",\n                  marginLeft: \"-0.8em\",\n                  borderRadius: \"15px\",\n                }}\n              />\n            </div>\n\n            {/* name and time */}\n            <div className=\"col-8\">\n              <span\n                style={{\n                  marginTop: \"1.9em\",\n                  marginLeft: \"0.3em\",\n                  fontSize: \"14px\",\n                }}\n              > \n              \n              {task.taskName}\n              </span>{\" \"}\n              <br />\n              <span\n                style={{\n                  marginTop: \"1.9em\",\n                  marginLeft: \"0.9em\",\n                  fontSize: \"9px\",\n                }}\n              >\n                {task.taskAssignedBy}{\" \"} \n                <span\n                  style={{\n                    marginTop: \"1.9em\",\n                    marginLeft: \"0.9em\",\n                    fontSize: \"7px\",\n                  }}\n                >\n                  Posted {task.taskCreatedOn}\n                </span>{\" \"}\n                <br />\n              </span>\n              <button onClick={handleShow} style={{\n                  marginTop: \"-1em\",\n                  marginLeft: \"0.3em\",\n                  border:'none',\n                  color: \"blue\",\n                  fontSize: \"9px\",\n                  color: \"white\",\n                  backgroundColor: \"#283645\",\n                }}>View</button>\n              <img\n                src={Pending}\n                alt=\"profiles\"\n                style={{\n                  height: \"1em\",\n                  width: \"1em\",\n                  borderRadius: \"15px\",\n                  marginLeft: \"1em\",\n                }}\n              />\n              <span\n                style={{\n                  marginTop: \"1.3em\",\n                  marginLeft: \"1em\",\n                  color: \"red\",\n                  fontSize: \"9px\",\n                  color: \"white\",\n                }}\n              >\n                {taskStatus}\n              </span>\n            </div>\n\n          </div>\n          );\n           })}\n        </div>\n\n        {/*test container */}\n\n        {/* <div className=\"col-4\">\n          {taskss.map(task => {\n            return (\n              <div key={task.id}> \n                <h2>{task.taskName}</h2>\n                <p>{task.taskDescription}</p>\n                <p>{task.taskEndDate}</p>\n                <p>{task.taskLocation}</p>\n                <p>{task.taskStartDate}</p>\n                <p>{task.taskCreatedOn}</p>\n                <p>{task.taskPrice}</p>\n                <p>{task.taskStatus}</p>\n                <p>{task.taskAssignedBy}</p>\n              </div>)\n          })}\n        </div> */}\n        {/* Modal */}\n       \n      </div> \n      <div>\n      {taskss.map(task => {\n            return (\n              <div key={task.id}> \n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header >\n          <Modal.Title> {task.taskAssignedBy} </Modal.Title>\n         \n        </Modal.Header>\n        <Modal.Body>  </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={secondWrapperFunction}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={wrapperFunction} >\n            {buttonText}\n          </Button>\n        </Modal.Footer>\n     </Modal>\n     </div>)\n          })}\n     </div>\n    </div>\n   \n    </>\n   \n  );\n}\n\nexport default Gatepool;\n","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Modal/Modals.js",["155","156"],[],"import React from 'react'\nimport { Modal } from 'react-bootstrap'\n\nfunction Modals() {\n//     const showGatepool = () => setShowGatepool((prevState) => !showTicket && !prevState); \n//     const showTicket = () => setTicket((prevState) => !showGatepool && !prevState);\n\n\n//    onClick={()=> setShowGatepool(!showGatepool )}\n//    <Button onClick={()=> setShowGatepool(!showGatepool )}>Gate Pool</Button> <br/>\n\n\n//    const [showGatepool, setShowGatepool] = React.useState(false);\n//   const [showTicket, setTicket] = React.useState(false);\n//   const [showHistory, setHistory] = React.useState(false);\n//   const [showTasks, setTasks] = React.useState(false);\n\n//   return (\n//     <div className='Modal'>\n//         <>\n\n        \n        \n//         </>\n\n//     </div>\n//   )\n}\n\nexport default Modals","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Principal/Dashboardprincipal.js",["157","158","159"],[],"import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport '../../Styles/Dashboardproxi.css'\nimport profilephoto from '../../Media/proxiphoto.jpeg';\nimport { Button } from 'react-bootstrap';\n import Ticket from '../../Dashboard_Items/Ticket'; \nimport History from '../../Dashboard_Items/History';\nimport Tasks from '../../Dashboard_Items/Tasks';\nimport Sendrequests from './Sendrequests';\nimport Tasksprincipal from './Taskprincipal';\n\n\n\n\nfunction Dashboardprincipal() {\n  const [showSendrequests, setShowSendrequests] = React.useState(false);\n  const [showTicket, setTicket] = React.useState(false);\n  const [showHistory, setHistory] = React.useState(false);\n  const [showTasksprincipal, setTasksprincipal] = React.useState(false);\n\n  const showSendrequestsModal = () => setShowSendrequests((prevState) => !showTicket && !prevState);\n  const showTicketModal = () => setTicket((prevState) => !showSendrequests && !prevState);\n  const showHistoryModal = () => setHistory((prevState) => !showTasksprincipal && !prevState);\n  const showTasksprincipalModal = () => setTasksprincipal((prevState) => !showHistory && !prevState);\n\n  \n  return (\n    <div className='row'>\n      <div className='col-4'>\n    <Card style={{ width: '18rem', height:'42em' }} id='cards'>\n      <Card.Img variant=\"top\" src=\"\" />\n      <Card.Body>\n        <Card.Title>Principal Profile</Card.Title>\n        <Card.Text>\n        <img src={profilephoto} width=\"250\" height=\"300\"  alt='logo' />\n        </Card.Text>\n      </Card.Body>\n      <ListGroup className=\"list-group-flush\">\n    <Button onClick={showSendrequestsModal}>Send Request</Button> <br/>\n    <Button onClick={ showTicketModal}>Ticket</Button> <br/>\n    <Button onClick={showHistoryModal }>History</Button> <br/>\n \n  \n      </ListGroup>\n      <Card.Body>\n        <Card.Link href=\"./Profile\" >Edit Profile </Card.Link>\n        <Card.Link href=\"#\">Sign Out</Card.Link>\n      </Card.Body>\n    </Card>d\n{/* Div for dashboard showing onClick items */}\n    </div>\n    <div className='col-8'>\n        {\n          showSendrequests ?<div> <Sendrequests/>  </div> : null\n        }\n        {\n          showTicket ? <div> <Ticket/> </div> : null\n        }\n        {\n          showHistory ? <div> <History/> </div> : null\n        }\n     \n      </div>\n    </div>\n  );\n}\n\nexport default Dashboardprincipal;","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Principal/Taskprincipal.js",["160","161","162","163","164","165","166","167","168","169"],[],"import React from 'react'\nimport './Sendrequests.css'\nimport {useState} from 'react'\n\n\n\nfunction Tasks() {\n    const current = new Date();\n    const date = `${current.getDate()}/${current.getMonth()+1}/${current.getFullYear()}`;\n    const time = `${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n\n    const [task, setTask] = useState({\n        taskName: '',\n        taskDescription: '',\n        taskStartDate: '',\n        taskEndDate: '',\n        taskStatus: '',\n        taskPriority: '',\n        taskAssignedTo: '',\n        taskAssignedBy: '',\n        taskCreatedOn: '',\n        taskUpdatedOn: ''\n    })\n\n    const [taskList, setTaskList] = useState([])\n    const [taskList1, setTaskList1] = useState([])\n\n    const handleInputChange = (e) => {\n        const {name, value} = e.target;\n        setTask({\n            ...task,\n            [name]: value,\n            taskCreatedOn: date,\n            taskUpdatedOn: time\n        })\n    }\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        setTaskList([...taskList, task])\n        setTask({\n            taskName: '',\n            taskDescription: '',\n            taskStartDate: '',\n            taskEndDate: '',\n            taskStatus: '',\n            taskPriority: '',\n            taskAssignedTo: '',\n            taskAssignedBy: '',\n            taskCreatedOn: '',\n            taskUpdatedOn: ''\n        })\n    }\n\n    const handleDelete = (index) => {\n        const newTaskList = [...taskList]\n        newTaskList.splice(index, 1)\n        setTaskList(newTaskList)\n    }\n\n    const handleEdit = (index) => {\n        const newTaskList = [...taskList]\n        setTask(newTaskList[index])\n        newTaskList.splice(index, 1)\n        setTaskList(newTaskList)\n    }\n\n    const handleFormSubmit1 = (e) => {\n        e.preventDefault();\n        setTaskList1([...taskList1, task])\n        setTask({\n            taskName: '',\n            taskDescription: '',\n            taskStartDate: '',\n            taskEndDate: '',\n            taskStatus: '',\n            taskPriority: '',\n            taskAssignedTo: '',\n            taskAssignedBy: '',\n            taskCreatedOn: '',\n            taskUpdatedOn: ''\n        })\n    }\n\n    const handleDelete1 = (index) => {\n        const newTaskList1 = [...taskList1]\n        newTaskList1.splice(index, 1)\n        setTaskList1(newTaskList1)\n    }\n\n    const handleEdit1 = (index) => {\n        const newTaskList1 = [...taskList1]\n        setTask(newTaskList1[index])\n        newTaskList1.splice(index, 1)\n        setTaskList1(newTaskList1)\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                {/* <div className=\"col-md-6\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h3>Send Requests</h3>\n                        </div>\n                        <div className=\"card-body\">\n                            <form onSubmit={handleFormSubmit}>\n                                <div className=\"form-group\">\n                                    <label>Task Name</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskName\" value={task.taskName} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Description</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskDescription\" value={task.taskDescription} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Start Date</label>\n                                    <input type=\"date\" className=\"form-control\" name=\"taskStartDate\" value={task.taskStartDate} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task End Date</label>\n                                    <input type=\"date\" className=\"form-control\" name=\"taskEndDate\" value={task.taskEndDate} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Status</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskStatus\" value={task.taskStatus} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Priority</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskPriority\" value={task.taskPriority} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Assigned To</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskAssignedTo\" value={task.taskAssignedTo} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Assigned By</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskAssignedBy\" value={task.taskAssignedBy} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Created On</label >  \n                                    <input type=\"text\" className=\"form-control\" name=\"taskCreatedOn\" value={task.taskCreatedOn} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Updated On</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskUpdatedOn\" value={task.taskUpdatedOn} onChange={handleInputChange} />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                            </form>\n                        </div>\n                    </div>\n                </div> */}\n                  <div className=\"col-md-6\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h3>Requests</h3>\n                        </div>\n                        <div className=\"card-body\">\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th>Task Name</th>\n                                        <th>Task Description</th>\n                                        <th>Task Start Date</th>\n                                        <th>Task End Date</th>\n                                        <th>Task Status</th>\n                                        <th>Task Priority</th>\n                                        <th>Task Assigned To</th>\n                                        <th>Task Assigned By</th>\n                                        <th>Task Created On</th>\n                                        <th>Task Updated On</th>\n                                        <th>Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        taskList.map((task, index) => (\n                                            <tr key={index}>\n                                                <td>{task.taskName}</td>\n                                                <td>{task.taskDescription}</td>\n                                                <td>{task.taskStartDate}</td>\n                                                <td>{task.taskEndDate}</td>\n                                                <td>{task.taskStatus}</td>\n                                                <td>{task.taskPriority}</td>\n                                                <td>{task.taskAssignedTo}</td>\n                                                <td>{task.taskAssignedBy}</td>\n                                                <td>{task.taskCreatedOn}</td>\n                                                <td>{task.taskUpdatedOn}</td>\n                                                <td>\n                                                    <button className=\"btn btn-primary\" onClick={() => handleEdit(index)}>Edit</button>\n                                                    <button className=\"btn btn-danger\" onClick={() => handleDelete(index)}>Delete</button>\n                                                </td>\n                                            </tr>\n                                        ))\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>  \n            </div>\n        </div>\n    )\n}\n\nexport default Tasks\n\n\n    \n\n\n{/* \n  return (\n    \n    <div className='container'  id='containers'>\n      <div className='row'>\n        <div className='col-2' id='col1'>\n          <form>\n          <h4>Task Subject</h4>\n            <textarea name='' id='' cols='20' rows='3' placeholder='What is your request'></textarea>\n          </form>\n        </div>\n        <div className='col-5' id='col2'>\n          <h4>Task Description</h4>\n            <form>\n                 <textarea name='' id='' cols='20' rows='5' placeholder='Please input task details/requirements'></textarea>\n            </form>\n        </div>\n        <div className='col-5' id='col3'>\n          <h4>Request Details</h4>\n          <div>\n            <p>Request Date: {date}</p>\n            <p>Estimated Amount: </p>\n            <p>Expected completion date : </p>\n            <p>Location/Address: </p>\n          \n            <form className=''>\n              <textarea name='' id='' cols='20' rows='3' placeholder='Other required info'></textarea>\n            </form>\n           \n          </div>\n      \n        </div>\n        <div>\n        <div className='' id='col4'>\n          <button className='btn btn-primary'>Send </button>\n          <button className='btn btn-primary'>Cancel</button>\n        </div>\n\n        </div>\n\n      </div>\n\n\n    </div>\n  )\n}\n\nexport default Tasks */}","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Pages/Principal/Sendrequests.js",["170","171","172","173","174","175","176","177"],[],"import React from 'react'\nimport './Sendrequests.css'\nimport {useState} from 'react'\nimport Delete from '../../Media/delete.png'\nimport Edit from '../../Media/edit.png'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n\nfunction Tasks() {\n    const current = new Date();\n    const date = `${current.getDate()}/${current.getMonth()+1}/${current.getFullYear()}`;\n    const time = `${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n    const [disable , setDisable] = useState(true);\n    const [error, setError] = React.useState(\"\");\n    const [loading, setLoading] = React.useState(false);\n\n    const [task, setTask] = useState({\n        taskName: '',\n        taskDescription: '',\n        taskStartDate: '',\n        taskEndDate: '',\n        // taskStatus: '',\n        taskPrice: '',\n        taskLocation: '',\n        taskAssignedBy: '',\n        taskCreatedOn: '',\n        // taskUpdatedOn: ''\n    })\n\n    const [taskList, setTaskList] = useState([])\n\n    const handleInputChange = (e) => {\n        const {name, value} = e.target;\n        setTask({\n            ...task,\n            [name]: value,\n            taskCreatedOn: date,\n            // taskUpdatedOn: time\n        })\n    }\n     \n    function handleEmptyInputField() {\n        if (task.taskName === '' || task.taskDescription === '' || task.taskStartDate === '' || task.taskEndDate === '' || task.taskPrice === '' || task.taskLocation === '') {\n            setError(\"Please fill all the fields\");\n            return false;\n        }\n        return true;\n    }\n\n    // const handleSubmit = (e) => {\n    //     e.preventDefault();\n    //     if (handleEmptyInputField()) {\n    //         setTaskList([...taskList, task]);\n    //         setTask({\n    //             taskName: '',\n    //             taskDescription: '',\n    //             taskStartDate: '',\n    //             taskEndDate: '',\n    //             // taskStatus: '',\n    //             taskPrice: '',\n    //             taskLocation: '',\n    //             // taskAssignedBy: '',\n    //             taskCreatedOn: '',\n    //             // taskUpdatedOn: ''\n    //         })\n    //         setError(\"\");\n    //     }\n    // }\n\n    // create function to handle all functions \n\n    const handleFormSubmit = async (e) => {\n        const notify = () => toast(\"Task created successfully\");\n        e.preventDefault();\n        handleEmptyInputField();\n        notify();\n        setTaskList([...taskList, task])\n        setTask({\n            taskName: '',\n            taskDescription: '',\n            taskStartDate: '',\n            taskEndDate: '',\n            // taskStatus: '',\n            taskPrice: '',\n            taskLocation: '',\n            taskAssignedBy: '',\n            taskCreatedOn: '',\n            // taskUpdatedOn: ''\n        })\n        if (task.taskName === '' || task.taskDescription === '' || task.taskStartDate === '' || task.taskEndDate === '' || task.taskStatus === '' || task.taskPrice === '' || task.taskLocation === '' || task.taskAssignedBy === '') {\n            setDisable(true)\n        }\n        else {\n            setDisable(false)\n        }\n        try {\n            const response = await fetch(\"http://127.0.0.1:5000/requests\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    taskName: task.taskName,\n                    taskDescription: task.taskDescription,\n                    taskStartDate: task.taskStartDate,\n                    taskEndDate: task.taskEndDate,\n                    // taskStatus: task.taskStatus,\n                    taskPrice: task.taskPrice,\n                    taskLocation: task.taskLocation,\n                    taskAssignedBy: task.taskAssignedBy,\n                    taskCreatedOn: task.taskCreatedOn\n                }),\n            });\n            const data = await response.json();\n            if (data.error) {\n                setError(data.error);\n                setLoading(false);\n                return;\n            }\n            setError(\"\");\n            setLoading(false);\n            // window.location.href = \"/dashboardprincipal\";\n        } catch (error) {\n            setError(error.message);\n            setLoading(false);\n        }\n\n    }\n\n    // const deleteTask = (index) => {\n    //     const newTaskList = [...taskList];\n    //     newTaskList.splice(index, 1);\n    //     setTaskList(newTaskList);\n    // }\n\n    const handleDelete = (index) => {\n        const newTaskList = [...taskList]\n        newTaskList.splice(index, 1)\n        setTaskList(newTaskList)\n    }\n\n    const handleEdit = (index) => {\n        const newTaskList = [...taskList]\n        setTask(newTaskList[index])\n        newTaskList.splice(index, 1)\n        setTaskList(newTaskList)\n    }\n\n    return (\n        \n        <div className=\"container\">\n         <ToastContainer position=\"top-center\" autoClose={2000} hideProgressBar={false} newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />\n            <div className=\"row\" id='containers'>\n                <div className=\"col-md-6\" id='taskfill'>\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h3>Send Requests</h3>\n                        </div>\n                        <div className=\"card-body\">\n                            <form onSubmit={handleFormSubmit}>\n                                <div className=\"form-group\">\n                                    <label>Task Heading</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskName\" value={task.taskName} onChange={handleInputChange}  placeholder='Put in Subject'/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Description</label>\n                                    <textarea placeholder='Enter task details' className=\"form-control\" name=\"taskDescription\" value={task.taskDescription} onChange={handleInputChange}  />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Start Date</label>\n                                    <input type=\"date\" className=\"form-control\" name=\"taskStartDate\" value={task.taskStartDate} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task End Date</label>\n                                    <input type=\"date\" className=\"form-control\" name=\"taskEndDate\" value={task.taskEndDate} onChange={handleInputChange} />\n                                </div>\n                                {/* <div className=\"form-group\">\n                                    <label>Task Status</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskStatus\" value={task.taskStatus} onChange={handleInputChange} />\n                                </div> */}\n                                <div className=\"form-group\">\n                                    <label>Task Payment</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskPrice\" value={task.taskPrice} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Location</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskLocation\" value={task.taskLocation} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Assigned By</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskAssignedBy\" value={task.taskAssignedBy} onChange={handleInputChange} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Task Created On</label >  \n                                    <input type=\"text\" className=\"form-control\" name=\"taskCreatedOn\" value={task.taskCreatedOn} onChange={handleInputChange} placeholder='The date is automatically selected onclicking submit'/>\n                                </div>\n                                {/* <div className=\"form-group\">\n                                    <label>Task Updated On</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"taskUpdatedOn\" value={task.taskUpdatedOn} onChange={handleInputChange} />\n                                </div> */}\n                                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n              <div className=\"col-md-6\">\n                    <div className=\"card\" id='editrequests'>\n                        <div className=\"card-header\">\n                            <h3>Requests</h3>\n                        </div>\n                        <div className=\"card-body\">\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th>  Heading</th>\n                                        <th>  Description</th>\n                                        <th> Start Date</th>\n                                        <th>  End Date</th>\n                                        {/* <th>Task Status</th> */}\n                                        <th>  Payment</th>\n                                        <th>  Location</th>\n                                        <th>Task Assigned By</th>\n                                        <th>Date</th>\n                                        {/* <th>Task Updated On</th> */}\n                                        <th>Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        taskList.map((task, index) => (\n                                            <tr key={index}>\n                                                <td>{task.taskName}</td>\n                                                <td>{task.taskDescription}</td>\n                                                <td>{task.taskStartDate}</td>\n                                                <td>{task.taskEndDate}</td>\n                                                {/* <td>{task.taskStatus}</td> */}\n                                                <td>{task.taskPrice}</td>\n                                                <td>{task.taskLocation}</td>\n                                                <td>{task.taskAssignedBy}</td>\n                                                <td>{task.taskCreatedOn}</td>\n                                                {/* <td>{task.taskUpdatedOn}</td> */}\n                                                <td>\n                                                    <img src={Edit} alt=\"edit\" onClick={() => handleEdit(index)} style={{width:'30%', marginLeft:'10px', marginRight:'10px'}} /> \n                                                    <img src={Delete} alt=\"delete\" onClick={() => handleDelete(index)} style={{width:'30%'}} />\n                                                </td>\n                                            </tr>\n                                        ))\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div> \n            </div>\n        </div>\n    )\n}\n\nexport default Tasks\n\n\n    ","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/store/actions/appContext.js",["178"],[],"import React, {useState, useEffect} from 'react';\nimport getState from './actions';\n\n\n\nexport const Context = React.createContext();\n\nconst injectContext = PassedComponent => {\n  const StoreWrapper = props => {\n    const [state, setState] = useState(\n        getState({\n            getStore: () => state.store,\n            getActions: () => state.actions,\n            setStore: updatedStore =>\n                setState({\n                    store: Object.assign(state.store, updatedStore),\n                    actions: {...state.actions}\n                })\n        })\n    );\n\n    useEffect(() => {\n        state.actions.loadSomeData();\n        state.actions.syncTokenFromSessionStore();\n    }, []);\n\n    return (\n        <Context.Provider value={state}>\n            <PassedComponent {...props} />\n        </Context.Provider>\n    );\n};\nreturn StoreWrapper;\n};\n\nexport default injectContext;\n\n","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Components/store/actions/actions.js",["179","180"],[],"const getState = ({getStore, getActions, setStore}) => {\n    \n    return {\n        \n        store: {\n            token: null,\n            message: null,\n            demo: [ \n                { \n                    title: \"First Task\", \n                    done: false \n                }, \n                { \n                    title: \"Second Task\", \n                    done: false \n                } \n            ],\n         \n        },\n        \n        actions: {\n            // Use getActions to call a function within a function\n            exampleFunction: () => {\n                getActions().changeColor(0, \"green\");\n            },\n\n            syncTokenFromSessionStore: () => {\n                const token = sessionStorage.getItem('token');\n                console.log(\"application just loaded synching the local storage token with the session storage token\")\n                if (token && token != \"\" && token != \"undefined\") setStore({token: token});\n            },\n\n            //logout function and redirect to home page onclick\n\n            logout: () => {\n                sessionStorage.removeItem('token');\n                setStore({token: null});\n                console.log('loggging you out')\n                window.location.href = \"/\";\n            },\n\n            login: async (email, password) => {\n                // THIS WAS USED TO TEST FOR LOGIN TRY IT AND CHECK YOUR CONSOLE\n                console.log(\"I want to login oooo\")\n                console.log(email)\n                console.log(password)\n                // THIS WAS USED TO TEST FOR LOGIN TRY IT AND CHECK YOUR CONSOLE\n                const opts = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        email: email,\n                        password: password,\n                    }),\n                };\n\n                try {\n                    const resp = await fetch('/token', opts)\n                    if (resp.status !== 200) {\n                        alert('Invalid credentials');\n                        return false;\n                    }\n\n                    const data = await resp.json();\n                    console.log('this came from backend',data );\n                    sessionStorage.setItem('token', data.access_token);\n                    setStore({token: data.access_token});\n                    return true;\n                }\n                catch (error) {\n                    console.error(\"there was an error login in!!!\", error);\n                }\n               \n            },\n\n            loadSomeData: () => {\n                const store = getStore();\n                const opts = {\n                    headers: {\n                        'Authorization': 'Bearer ' + store.token,\n                    },\n                };\n                // fetching data from the backend\n                fetch(\"http://localhost:5000/\", opts)\n                    .then(resp => resp.json())\n                    .then(data => setStore({message: data.message}))\n                    .catch(error => console.log(\"Error loading data\", error));\n            },\n            changeColor: (index, color) => {\n                //get the store\n                const store = getStore();\n\n                //we have to loop the entire demo array to look for the respective index\n                //and change its color\n                const demo = store.demo.map((elm, i) => {\n                    if (i === index) elm.background = color;\n                    return elm;\n                });\n                \n\n                //reset the global store\n                setStore({ demo: demo });\n            },\n\n           \n            \n        }\n    };\n};\n\n\nexport default getState;\n","/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/History.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/Ticket.js",[],[],"/Users/aroyehunoluwasegun/Downloads/proxy-storeIssue/frontend/src/Dashboard_Items/Tasks.js",["181","182"],[],"import React, {useEffect, useState} from 'react'\nimport {Button} from 'react-bootstrap'\n// import {Button} from \"@mui/material\"\n\nfunction Tasksreport() {\n    //task fecth\n const [histories, setHistories] = React.useState([]);\n  useEffect(() => {\n    fetch(\"/fecthtaskhistory\").then((response) =>\n      response.json().then((data) => {\n        setHistories(data.tasks);\n      })\n    );\n  }, []);\n  console.log(histories);\n\n//button text\n  const [buttonText, setButtonText] = useState('Request Payment');\n  function handleClick() {\n    setButtonText('Payment Requested');\n  }\n\n  return (\n    // {histories.map(task => {\n    //   return (\n  \n      <div className='row' style={{marginTop:'60px'}}>\n        \n        <div>\n         <h4 style={{marginBottom:'40px'}}>My Tasks</h4>\n        {/* account history  */}\n       \n        <div className='col-10'>\n       \n        <div  >\n\n          <table className='table table-striped' >\n            <thead>\n              <tr style={{color:'white', backgroundColor:'blue'}} >\n              <th scope='col'>S/N </th> \n                <th scope='col'>Start Date </th> \n                <th scope='col'>Description</th>\n                <th scope='col'>Customer Name</th>\n                <th scope='col'>Amount</th>\n                <th scope='col'> Task Status</th>\n           \n              </tr>\n            </thead>\n            <>\n            {histories.map(task => {\n          return (\n\n\n            <tbody key={task.id} >\n              <tr>\n                <td>{task.id}</td>\n                <td >{task.taskStartDate}</td>\n                <td>{task.taskName}</td>\n                <td>{task.taskAssignedBy}</td>\n                <td>{task.taskPrice}</td>\n                <td> <Button  >Request Payment</Button>  <Button>Cancel</Button></td>\n              </tr>\n            </tbody>\n             )\n            })}\n            </>\n          </table>\n      </div>\n       \n      </div>\n\n      </div>\n    \n    </div>\n  )\n}\n\nexport default Tasksreport",{"ruleId":"183","severity":1,"message":"184","line":13,"column":8,"nodeType":"185","messageId":"186","endLine":13,"endColumn":14},{"ruleId":"183","severity":1,"message":"187","line":22,"column":10,"nodeType":"185","messageId":"186","endLine":22,"endColumn":18},{"ruleId":"183","severity":1,"message":"188","line":22,"column":20,"nodeType":"185","messageId":"186","endLine":22,"endColumn":29},{"ruleId":"183","severity":1,"message":"189","line":56,"column":9,"nodeType":"185","messageId":"186","endLine":56,"endColumn":30},{"ruleId":"190","severity":1,"message":"191","line":56,"column":33,"nodeType":"192","endLine":56,"endColumn":46},{"ruleId":"183","severity":1,"message":"193","line":15,"column":9,"nodeType":"185","messageId":"186","endLine":15,"endColumn":17},{"ruleId":"183","severity":1,"message":"194","line":29,"column":11,"nodeType":"185","messageId":"186","endLine":29,"endColumn":19},{"ruleId":"195","severity":1,"message":"196","line":40,"column":34,"nodeType":"197","messageId":"198","endLine":40,"endColumn":36},{"ruleId":"195","severity":1,"message":"196","line":40,"column":55,"nodeType":"197","messageId":"198","endLine":40,"endColumn":57},{"ruleId":"195","severity":1,"message":"196","line":44,"column":34,"nodeType":"197","messageId":"198","endLine":44,"endColumn":36},{"ruleId":"195","severity":1,"message":"196","line":44,"column":55,"nodeType":"197","messageId":"198","endLine":44,"endColumn":57},{"ruleId":"183","severity":1,"message":"199","line":2,"column":10,"nodeType":"185","messageId":"186","endLine":2,"endColumn":15},{"ruleId":"183","severity":1,"message":"200","line":9,"column":10,"nodeType":"185","messageId":"186","endLine":9,"endColumn":15},{"ruleId":"183","severity":1,"message":"201","line":9,"column":17,"nodeType":"185","messageId":"186","endLine":9,"endColumn":25},{"ruleId":"183","severity":1,"message":"202","line":16,"column":9,"nodeType":"185","messageId":"186","endLine":16,"endColumn":28},{"ruleId":"183","severity":1,"message":"203","line":1,"column":10,"nodeType":"185","messageId":"186","endLine":1,"endColumn":18},{"ruleId":"183","severity":1,"message":"204","line":1,"column":20,"nodeType":"185","messageId":"186","endLine":1,"endColumn":26},{"ruleId":"183","severity":1,"message":"205","line":2,"column":17,"nodeType":"185","messageId":"186","endLine":2,"endColumn":26},{"ruleId":"183","severity":1,"message":"206","line":8,"column":10,"nodeType":"185","messageId":"186","endLine":8,"endColumn":21},{"ruleId":"183","severity":1,"message":"207","line":9,"column":8,"nodeType":"185","messageId":"186","endLine":9,"endColumn":19},{"ruleId":"183","severity":1,"message":"208","line":12,"column":10,"nodeType":"185","messageId":"186","endLine":12,"endColumn":14},{"ruleId":"209","severity":1,"message":"210","line":15,"column":19,"nodeType":"211","messageId":"198","endLine":15,"endColumn":21},{"ruleId":"183","severity":1,"message":"212","line":20,"column":10,"nodeType":"185","messageId":"186","endLine":20,"endColumn":19},{"ruleId":"183","severity":1,"message":"213","line":20,"column":21,"nodeType":"185","messageId":"186","endLine":20,"endColumn":29},{"ruleId":"214","severity":1,"message":"215","line":190,"column":19,"nodeType":"216","messageId":"198","endLine":190,"endColumn":24},{"ruleId":"214","severity":1,"message":"215","line":209,"column":19,"nodeType":"216","messageId":"198","endLine":209,"endColumn":24},{"ruleId":"183","severity":1,"message":"217","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":13},{"ruleId":"183","severity":1,"message":"218","line":2,"column":10,"nodeType":"185","messageId":"186","endLine":2,"endColumn":15},{"ruleId":"183","severity":1,"message":"219","line":9,"column":8,"nodeType":"185","messageId":"186","endLine":9,"endColumn":13},{"ruleId":"183","severity":1,"message":"220","line":11,"column":8,"nodeType":"185","messageId":"186","endLine":11,"endColumn":22},{"ruleId":"183","severity":1,"message":"221","line":25,"column":9,"nodeType":"185","messageId":"186","endLine":25,"endColumn":32},{"ruleId":"183","severity":1,"message":"222","line":11,"column":12,"nodeType":"185","messageId":"186","endLine":11,"endColumn":21},{"ruleId":"183","severity":1,"message":"223","line":11,"column":23,"nodeType":"185","messageId":"186","endLine":11,"endColumn":35},{"ruleId":"183","severity":1,"message":"224","line":12,"column":12,"nodeType":"185","messageId":"186","endLine":12,"endColumn":19},{"ruleId":"183","severity":1,"message":"225","line":12,"column":21,"nodeType":"185","messageId":"186","endLine":12,"endColumn":31},{"ruleId":"183","severity":1,"message":"226","line":30,"column":11,"nodeType":"185","messageId":"186","endLine":30,"endColumn":28},{"ruleId":"183","severity":1,"message":"227","line":40,"column":11,"nodeType":"185","messageId":"186","endLine":40,"endColumn":27},{"ruleId":"183","severity":1,"message":"228","line":70,"column":11,"nodeType":"185","messageId":"186","endLine":70,"endColumn":28},{"ruleId":"183","severity":1,"message":"229","line":87,"column":11,"nodeType":"185","messageId":"186","endLine":87,"endColumn":24},{"ruleId":"183","severity":1,"message":"230","line":93,"column":11,"nodeType":"185","messageId":"186","endLine":93,"endColumn":22},{"ruleId":"231","severity":1,"message":"232","line":215,"column":1,"nodeType":"233","messageId":"234","endLine":262,"endColumn":25},{"ruleId":"183","severity":1,"message":"235","line":14,"column":11,"nodeType":"185","messageId":"186","endLine":14,"endColumn":15},{"ruleId":"183","severity":1,"message":"222","line":15,"column":12,"nodeType":"185","messageId":"186","endLine":15,"endColumn":21},{"ruleId":"183","severity":1,"message":"223","line":15,"column":23,"nodeType":"185","messageId":"186","endLine":15,"endColumn":35},{"ruleId":"183","severity":1,"message":"224","line":16,"column":12,"nodeType":"185","messageId":"186","endLine":16,"endColumn":19},{"ruleId":"183","severity":1,"message":"225","line":16,"column":21,"nodeType":"185","messageId":"186","endLine":16,"endColumn":31},{"ruleId":"183","severity":1,"message":"236","line":17,"column":12,"nodeType":"185","messageId":"186","endLine":17,"endColumn":19},{"ruleId":"183","severity":1,"message":"200","line":18,"column":12,"nodeType":"185","messageId":"186","endLine":18,"endColumn":17},{"ruleId":"183","severity":1,"message":"237","line":19,"column":12,"nodeType":"185","messageId":"186","endLine":19,"endColumn":19},{"ruleId":"190","severity":1,"message":"238","line":25,"column":8,"nodeType":"239","endLine":25,"endColumn":10,"suggestions":"240"},{"ruleId":"195","severity":1,"message":"196","line":30,"column":36,"nodeType":"197","messageId":"198","endLine":30,"endColumn":38},{"ruleId":"195","severity":1,"message":"196","line":30,"column":51,"nodeType":"197","messageId":"198","endLine":30,"endColumn":53},{"ruleId":"183","severity":1,"message":"241","line":18,"column":10,"nodeType":"185","messageId":"186","endLine":18,"endColumn":20},{"ruleId":"183","severity":1,"message":"242","line":19,"column":12,"nodeType":"185","messageId":"186","endLine":19,"endColumn":23},"no-unused-vars","'Modals' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'authenticationContext' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression","'navigate' is assigned a value but never used.","'response' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Toast' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'navigateToDashboard' is assigned a value but never used.","'fontSize' is defined but never used.","'height' is defined but never used.","'Component' is defined but never used.","'useNavigate' is defined but never used.","'Tasksreport' is defined but never used.","'List' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'showTasks' is assigned a value but never used.","'setTasks' is assigned a value but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","'React' is defined but never used.","'Modal' is defined but never used.","'Tasks' is defined but never used.","'Tasksprincipal' is defined but never used.","'showTasksprincipalModal' is assigned a value but never used.","'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","'handleInputChange' is assigned a value but never used.","'handleFormSubmit' is assigned a value but never used.","'handleFormSubmit1' is assigned a value but never used.","'handleDelete1' is assigned a value but never used.","'handleEdit1' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'time' is assigned a value but never used.","'disable' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state.actions'. Either include it or remove the dependency array.","ArrayExpression",["243"],"'buttonText' is assigned a value but never used.","'handleClick' is defined but never used.",{"desc":"244","fix":"245"},"Update the dependencies array to be: [state.actions]",{"range":"246","text":"247"},[694,696],"[state.actions]"]